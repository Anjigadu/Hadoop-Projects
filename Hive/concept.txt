
## Data Type
#1. Primitive 

#2. Complex

(1) Array: Contain a list of elements of the same data type. These elements are accessed by using an index. 
            For example an array, “fruits”, containing a list of elements [‘apple’, ’mango’, ‘orange’], 
            the element “apple” in the array can be accessed by specifying fruits[1]

(2) Map: Contains key, value pairs. The elements are accessed by using the keys. 
         For example a map, “pass_list” containing the “user name” as key and “password” as value, 
         the password of the user can be accessed by specifying pass_list[‘username’]

(3) Struct: Contains elements of different data types. The elements can be accessed by using the dot notation. 
             For example in a struct, ”car”, the color of the car can be retrieved as specifying car.color
             
             
                        
## Index

CREATE INDEX table01_index ON TABLE table01 (column2) AS 'COMPACT';

SHOW INDEX ON table01;

DROP INDEX table01_index ON table01;

## Cubes and Rollups
The general syntax is WITH CUBE/ROLLUP. It is used with the GROUP BY only. 
CUBE creates a subtotal of all possible combinations of the set of column in its argument. 
Once we compute a CUBE on a set of dimension, we can get answer to all possible aggregation questions on those dimensions.
(1)
GROUP BY a, b, c WITH CUBE is equivalent to 
GROUP BY a, b, c GROUPING SETS ( (a, b, c), (a, b), (b, c), (a, c), (a), (b), (c), ( ))
(2)
ROLLUP clause is used with GROUP BY to compute the aggregate at the hierarchy levels of a dimension
GROUP BY a, b, c with ROLLUP assumes that the hierarchy is "a" drilling down to "b" drilling down to "c"
GROUP BY a, b, c, WITH ROLLUP is equivalent to GROUP BY a, b, c GROUPING SETS ( (a, b, c), (a, b), (a), ( ))

## ORDER BY, SORT BY, CLUSTER BY, and DISTRIBUTE BY
(1) ORDER BY
The default sorting order is ascending (ASC).
Default null sorting order for ASC order is NULL FIRST, while default null sorting order for DESC order is NULL LAST.

The limit clause is not necessary if you set hive.mapred.mode to nonstrict. 
hive.mapred.mode = nostrict

(2) SORT BY
Hive supports SORT BY which sorts the data per reducer. 
The difference between "order by" and "sort by" is that the former guarantees total order in the output while the latter only guarantees ordering of the rows within a reducer. 
If there are more than one reducer, "sort by" may give partially ordered final results.

(3) DISTRIBUTE BY
Cluster By and Distribute By are used mainly with the Transform/Map-Reduce Scripts. 
It is sometimes useful in SELECT statements if there is a need to partition and sort the output of a query for subsequent queries.

Hive uses the columns in Distribute By to distribute the rows among reducers. All rows with the same Distribute By columns will go to the same reducer. However, Distribute By does not guarantee clustering or sorting properties on the distributed keys.

(4) CLUSTER BY
Cluster By is a short-cut for both Distribute By and Sort By.

[Difference Between CLUSTER BY and DISTRIBUTE BY]
Instead of specifying Cluster By, the user can specify Distribute By and Sort By, so the partition columns and sort columns can be different. The usual case is that the partition columns are a prefix of sort columns, but that is not required.

SELECT col1, col2 FROM t1 CLUSTER BY col1

SELECT col1, col2 FROM t1 DISTRIBUTE BY col1
 
SELECT col1, col2 FROM t1 DISTRIBUTE BY col1 SORT BY col1 ASC, col2 DESC








