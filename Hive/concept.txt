
## Data Type
#1. Primitive 

#2. Complex

(1) Array: Contain a list of elements of the same data type. These elements are accessed by using an index. 
            For example an array, “fruits”, containing a list of elements [‘apple’, ’mango’, ‘orange’], 
            the element “apple” in the array can be accessed by specifying fruits[1]

(2) Map: Contains key, value pairs. The elements are accessed by using the keys. 
         For example a map, “pass_list” containing the “user name” as key and “password” as value, 
         the password of the user can be accessed by specifying pass_list[‘username’]

(3) Struct: Contains elements of different data types. The elements can be accessed by using the dot notation. 
             For example in a struct, ”car”, the color of the car can be retrieved as specifying car.color
             
             
                        
## Index

CREATE INDEX table01_index ON TABLE table01 (column2) AS 'COMPACT';

SHOW INDEX ON table01;

DROP INDEX table01_index ON table01;

## Cubes and Rollups
The general syntax is WITH CUBE/ROLLUP. It is used with the GROUP BY only. 
CUBE creates a subtotal of all possible combinations of the set of column in its argument. 
Once we compute a CUBE on a set of dimension, we can get answer to all possible aggregation questions on those dimensions.
(1)
GROUP BY a, b, c WITH CUBE is equivalent to 
GROUP BY a, b, c GROUPING SETS ( (a, b, c), (a, b), (b, c), (a, c), (a), (b), (c), ( ))
(2)
ROLLUP clause is used with GROUP BY to compute the aggregate at the hierarchy levels of a dimension
GROUP BY a, b, c with ROLLUP assumes that the hierarchy is "a" drilling down to "b" drilling down to "c"
GROUP BY a, b, c, WITH ROLLUP is equivalent to GROUP BY a, b, c GROUPING SETS ( (a, b, c), (a, b), (a), ( ))
